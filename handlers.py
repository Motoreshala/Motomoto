import logging
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram import Update
from telegram.ext import CallbackContext
from io import BytesIO
from openpyxl import Workbook
import config
import logic
import gdrive

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å logic/handlers –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è–º)
MAIN_MENU, PROCESSING_WB, PROCESSING_OZ, PROCESSING_CONFIRM, STOCK_MENU = range(1, 6)
WAITING_SUBTRACT_ITEM, WAITING_SUBTRACT_QTY = 6, 7
WAITING_ADD_ITEM, WAITING_ADD_QTY = 8, 9
WAITING_RECEIVE_FILE = 10
WAITING_REVISION_FILE = 11
CLEAR_CONFIRM = 12
WAITING_SEARCH_QUERY = 13

# –†–∞–∑–º–µ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
main_menu_buttons = [
    ["–û–±—Ä–∞–±–æ—Ç–∫–∞", "–û—Å—Ç–∞—Ç–∫–∏"],
    ["–ü–æ–∏—Å–∫", "–ü–æ–º–æ—â—å"],
    ["–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã"]
]
main_menu_kb = ReplyKeyboardMarkup(main_menu_buttons, resize_keyboard=True)

inventory_buttons = [
    ["–í—ã—á–µ—Å—Ç—å", "–î–æ–±–∞–≤–∏—Ç—å", "–ü—Ä–∏–µ–º–∫–∞"],
    ["–†–µ–≤–∏–∑–∏—è", "–û—Ç–∫–∞—Ç", "–ù–∞–∑–∞–¥"]
]
inventory_kb = ReplyKeyboardMarkup(inventory_buttons, resize_keyboard=True)

cancel_kb = ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True)

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –∑–∞–ø—É—Å—Ç–∏–ª /start.")
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb
    )
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def handle_processing(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–æ–≤ Wildberries (Excel/CSV). –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ WB –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'.",
        reply_markup=cancel_kb
    )
    context.user_data.clear()  # –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    return PROCESSING_WB

def handle_inventory(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞–º–∏:\n- –í—ã—á–µ—Å—Ç—å: —Å–ø–∏—Å–∞—Ç—å —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–ª–∞–¥–∞\n- –î–æ–±–∞–≤–∏—Ç—å: –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä\n- –ü—Ä–∏–µ–º–∫–∞: –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n- –†–µ–≤–∏–∑–∏—è: –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è\n- –û—Ç–∫–∞—Ç: –æ—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏",
        reply_markup=inventory_kb
    )
    return STOCK_MENU

def handle_search(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=cancel_kb)
    return WAITING_SEARCH_QUERY

def handle_help(update: Update, context: CallbackContext):
    help_text = (
        "‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n"
        "‚Ä¢ *–û–±—Ä–∞–±–æ—Ç–∫–∞* ‚Äì –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ (Wildberries, Ozon). –ë–æ—Ç —Å–ø–∏—à–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–ª–∞–¥–∞, —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –∏ –∑–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É.\n"
        "‚Ä¢ *–û—Å—Ç–∞—Ç–∫–∏* ‚Äì —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥—Å–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: –≤—ã—á–∏—Ç–∞–Ω–∏–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é, –ø—Ä–∏–µ–º–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ñ–∞–π–ª—É, —Ä–µ–≤–∏–∑–∏—è (–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è), –æ—Ç–∫–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.\n"
        "‚Ä¢ *–ü–æ–∏—Å–∫* ‚Äì –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–¥—É.\n"
        "‚Ä¢ *–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã* ‚Äì –æ—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (–ª–∏—Å—Ç '–ó–∞–∫–∞–∑—ã' –≤ Google –¢–∞–±–ª–∏—Ü–µ) –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n"
        "‚Ä¢ *–û—Ç–º–µ–Ω–∞* ‚Äì –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."
    )
    update.message.reply_text(help_text, reply_markup=main_menu_kb, parse_mode='Markdown')
    return MAIN_MENU

def handle_clear_orders(update: Update, context: CallbackContext):
    update.message.reply_text(
        "‚ùó –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return CLEAR_CONFIRM

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
def handle_wb_file(update: Update, context: CallbackContext):
    document = update.message.document
    if not document:
        return PROCESSING_WB
    file_name = document.file_name or "wb_orders"
    ext = file_name.split(".")[-1] if "." in file_name else "xlsx"
    local_path = f"wb_orders.{ext}"
    try:
        file_obj = document.get_file()
        file_obj.download(custom_path=local_path)
        orders_wb = __import__('utils').parse_orders_file(local_path, "WB")
        context.user_data["orders_wb"] = orders_wb
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ WB: {e}")
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª Wildberries. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.", reply_markup=cancel_kb)
        return PROCESSING_WB
    update.message.reply_text(f"üì• –§–∞–π–ª Wildberries –ø–æ–ª—É—á–µ–Ω. –ó–∞–∫–∞–∑–æ–≤: {len(context.user_data.get('orders_wb', []))}.", reply_markup=cancel_kb)
    update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–æ–≤ Ozon (–∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ Ozon).", reply_markup=cancel_kb)
    return PROCESSING_OZ

def skip_wb_file(update: Update, context: CallbackContext):
    context.user_data["orders_wb"] = []
    update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–æ–≤ Ozon (–∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ Ozon).", reply_markup=cancel_kb)
    return PROCESSING_OZ

def handle_oz_file(update: Update, context: CallbackContext):
    document = update.message.document
    if document:
        file_name = document.file_name or "ozon_orders"
        ext = file_name.split(".")[-1] if "." in file_name else "xlsx"
        local_path = f"ozon_orders.{ext}"
        try:
            file_obj = document.get_file()
            file_obj.download(custom_path=local_path)
            orders_oz = __import__('utils').parse_orders_file(local_path, "Ozon")
            context.user_data["orders_oz"] = orders_oz
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ Ozon: {e}")
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª Ozon. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.", reply_markup=cancel_kb)
            return PROCESSING_OZ
        update.message.reply_text(f"üì• –§–∞–π–ª Ozon –ø–æ–ª—É—á–µ–Ω. –ó–∞–∫–∞–∑–æ–≤: {len(context.user_data.get('orders_oz', []))}.", reply_markup=cancel_kb)
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª Ozon –∏–ª–∏ '–Ω–µ—Ç' (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è skip_oz_file), –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    orders_wb = context.user_data.get("orders_wb", [])
    orders_oz = context.user_data.get("orders_oz", [])
    all_orders = orders_wb + orders_oz
    if not all_orders:
        update.message.reply_text("‚ùï –ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=main_menu_kb)
        return MAIN_MENU
    analysis = logic.analyze_orders(all_orders)
    context.user_data["analysis"] = analysis
    missing_tm = analysis.get("missing_tm", {})
    if missing_tm:
        lines = [f"{gdrive.base_by_code.get(code, {}).get('brand', '')} {gdrive.base_by_code.get(code, {}).get('name', code)} ‚Äì {qty} —à—Ç" for code, qty in missing_tm.items()]
        text = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:\n" + "\n".join(lines) + "\n–ó–∞–∫–∞–∑–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞? (–î–∞/–ù–µ—Ç)"
        update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True))
        return PROCESSING_CONFIRM
    else:
        # –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ä–∞–∑—É
        logic.commit_order_processing(analysis, order_tm_confirmed=True)
        send_movement_and_order_tm(update, context, analysis, order_tm_confirmed=True)
        context.user_data.clear()
        return MAIN_MENU

def skip_oz_file(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç '–Ω–µ—Ç' –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ Ozon, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–ª—å–∫–æ —Å –∑–∞–∫–∞–∑–∞–º–∏ WB."""
    context.user_data["orders_oz"] = []
    orders_wb = context.user_data.get("orders_wb", [])
    all_orders = orders_wb
    if not all_orders:
        update.message.reply_text("‚ùï –ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=main_menu_kb)
        return MAIN_MENU
    analysis = logic.analyze_orders(all_orders)
    context.user_data["analysis"] = analysis
    missing_tm = analysis.get("missing_tm", {})
    if missing_tm:
        lines = [f"{gdrive.base_by_code.get(code, {}).get('brand', '')} {gdrive.base_by_code.get(code, {}).get('name', code)} ‚Äì {qty} —à—Ç" for code, qty in missing_tm.items()]
        text = "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:\n" + "\n".join(lines) + "\n–ó–∞–∫–∞–∑–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞? (–î–∞/–ù–µ—Ç)"
        update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], resize_keyboard=True, one_time_keyboard=True))
        return PROCESSING_CONFIRM
    else:
        logic.commit_order_processing(analysis, order_tm_confirmed=True)
        send_movement_and_order_tm(update, context, analysis, order_tm_confirmed=True)
        context.user_data.clear()
        return MAIN_MENU

def handle_process_confirm(update: Update, context: CallbackContext):
    user_reply = update.message.text.strip().lower()
    analysis = context.user_data.get("analysis")
    if not analysis:
        update.message.reply_text("–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb)
        return MAIN_MENU
    if user_reply in ["–¥–∞", "yes", "y"]:
        logic.commit_order_processing(analysis, order_tm_confirmed=True)
        send_movement_and_order_tm(update, context, analysis, order_tm_confirmed=True)
    else:
        logic.commit_order_processing(analysis, order_tm_confirmed=False)
        send_movement_and_order_tm(update, context, analysis, order_tm_confirmed=False)
    context.user_data.clear()
    return MAIN_MENU

def send_movement_and_order_tm(update: Update, context: CallbackContext, analysis, order_tm_confirmed):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–∞–π–ª—ã '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ' –∏ '–ó–∞–∫–∞–∑ –¢–ú' –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
    chat_id = update.effective_chat.id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤
    move_values = []
    ordertm_values = []
    try:
        move_values = gdrive.movement_sheet.get_all_values()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ': {e}")
    try:
        if order_tm_confirmed:
            ordertm_values = gdrive.order_tm_sheet.get_all_values()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è '–ó–∞–∫–∞–∑ –¢–ú': {e}")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ'
    if move_values and len(move_values) > 1:
        wb = Workbook()
        ws = wb.active
        for row in move_values:
            ws.append(row)
        bio = BytesIO()
        wb.save(bio); bio.seek(0)
        context.bot.send_document(chat_id, bio, filename="–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ.xlsx")
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ '–ó–∞–∫–∞–∑ –¢–ú'
    if order_tm_confirmed and ordertm_values and len(ordertm_values) > 1:
        wb2 = Workbook()
        ws2 = wb2.active
        for row in ordertm_values:
            ws2.append(row)
        bio2 = BytesIO()
        wb2.save(bio2); bio2.seek(0)
        context.bot.send_document(chat_id, bio2, filename="–ó–∞–∫–∞–∑_–¢–ú.xlsx")
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    msg_lines = []
    if move_values and len(move_values) > 1:
        msg_lines.append("‚úÖ –§–∞–π–ª '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ' —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
    else:
        msg_lines.append("‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–æ —Å–∫–ª–∞–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    if order_tm_confirmed:
        if ordertm_values and len(ordertm_values) > 1:
            msg_lines.append("‚úÖ –§–∞–π–ª '–ó–∞–∫–∞–∑ –¢–ú' —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
        else:
            msg_lines.append("‚úÖ –ó–∞–∫–∞–∑ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    else:
        msg_lines.append("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –∑–∞–∫–∞–∑–∞–Ω—ã (–ø—Ä–æ–ø—É—â–µ–Ω—ã).")
    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤, –µ—Å–ª–∏ –±—ã–ª–∏
    shortages = analysis.get("shortages", {})
    if shortages:
        shortage_lines = []
        for code, qty in shortages.items():
            name = gdrive.base_by_code.get(code, {}).get("name", code)
            brand = gdrive.base_by_code.get(code, {}).get("brand", "")
            shortage_lines.append(f"{name} ({brand}) ‚Äì {qty} —à—Ç")
        msg_lines.append("‚ö†Ô∏è –î–µ—Ñ–∏—Ü–∏—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ:\n" + "\n".join(shortage_lines))
    report_text = "\n".join(msg_lines)
    context.bot.send_message(chat_id, report_text, reply_markup=main_menu_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –û—Å—Ç–∞—Ç–∫–∏
def start_subtract(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=cancel_kb)
    context.user_data.pop("search_results", None)
    context.user_data.pop("target_code", None)
    return WAITING_SUBTRACT_ITEM

def handle_subtract_item(update: Update, context: CallbackContext):
    query = update.message.text.strip()
    if query.isdigit() and "search_results" in context.user_data:
        results = context.user_data["search_results"]
        idx = int(query)
        if 1 <= idx <= len(results):
            code, name, brand, stock = results[idx-1]
            context.user_data["target_code"] = code
            context.user_data.pop("search_results", None)
            update.message.reply_text(f"–¢–æ–≤–∞—Ä: {name} ({code}). –ù–∞ —Å–∫–ª–∞–¥–µ {stock} —à—Ç. –°–∫–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å?", reply_markup=cancel_kb)
            return WAITING_SUBTRACT_QTY
        else:
            query = ""  # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å, –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–∏—Å–∫
    results, total = logic.search_products(query)
    if total == 0:
        update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:", reply_markup=cancel_kb)
        return WAITING_SUBTRACT_ITEM
    elif total == 1:
        code, name, brand, stock = results[0]
        context.user_data["target_code"] = code
        context.user_data.pop("search_results", None)
        update.message.reply_text(f"–¢–æ–≤–∞—Ä: {name} ({code}). –ù–∞ —Å–∫–ª–∞–¥–µ {stock} —à—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=cancel_kb)
        return WAITING_SUBTRACT_QTY
    else:
        context.user_data["search_results"] = results
        list_text = "üîé –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤:\n"
        for i, (code, name, brand, stock) in enumerate(results, start=1):
            list_text += f"{i}. {name} ({brand}) ‚Äì {stock} —à—Ç (–∫–æ–¥ {code})\n"
        list_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:"
        update.message.reply_text(list_text, reply_markup=cancel_kb)
        return WAITING_SUBTRACT_ITEM

def handle_subtract_qty(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    if not text.isdigit():
        update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=cancel_kb)
        return WAITING_SUBTRACT_QTY
    qty = int(text)
    if qty <= 0:
        update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", reply_markup=cancel_kb)
        return WAITING_SUBTRACT_QTY
    code = context.user_data.get("target_code")
    name = gdrive.base_by_code.get(code, {}).get("name", code)
    current_stock = gdrive.warehouse_data.get(code, 0)
    try:
        logic.adjust_stock(code, -qty, "–†—É—á–Ω–æ–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Ç–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫.", reply_markup=inventory_kb)
        return STOCK_MENU
    new_stock = gdrive.warehouse_data.get(code, 0)
    if new_stock < 0:
        update.message.reply_text(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {qty} —à—Ç —Ç–æ–≤–∞—Ä–∞ \"{name}\". –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_stock} —à—Ç (–¥–µ—Ñ–∏—Ü–∏—Ç).", reply_markup=inventory_kb)
    else:
        update.message.reply_text(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {qty} —à—Ç —Ç–æ–≤–∞—Ä–∞ \"{name}\". –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {new_stock} —à—Ç.", reply_markup=inventory_kb)
    context.user_data.pop("target_code", None)
    context.user_data.pop("search_results", None)
    return STOCK_MENU

def start_add(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=cancel_kb)
    context.user_data.pop("search_results", None)
    context.user_data.pop("target_code", None)
    return WAITING_ADD_ITEM

def handle_add_item(update: Update, context: CallbackContext):
    query = update.message.text.strip()
    if query.isdigit() and "search_results" in context.user_data:
        results = context.user_data["search_results"]
        idx = int(query)
        if 1 <= idx <= len(results):
            code, name, brand, stock = results[idx-1]
            context.user_data["target_code"] = code
            context.user_data.pop("search_results", None)
            update.message.reply_text(f"–¢–æ–≤–∞—Ä: {name} ({code}). –ù–∞ —Å–∫–ª–∞–¥–µ {stock} —à—Ç. –°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=cancel_kb)
            return WAITING_ADD_QTY
        else:
            query = ""
    results, total = logic.search_products(query)
    if total == 0:
        update.message.reply_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:", reply_markup=cancel_kb)
        return WAITING_ADD_ITEM
    elif total == 1:
        code, name, brand, stock = results[0]
        context.user_data["target_code"] = code
        context.user_data.pop("search_results", None)
        update.message.reply_text(f"–¢–æ–≤–∞—Ä: {name} ({code}). –ù–∞ —Å–∫–ª–∞–¥–µ {stock} —à—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=cancel_kb)
        return WAITING_ADD_QTY
    else:
        context.user_data["search_results"] = results
        list_text = "üîé –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤:\n"
        for i, (code, name, brand, stock) in enumerate(results, start=1):
            list_text += f"{i}. {name} ({brand}) ‚Äì {stock} —à—Ç (–∫–æ–¥ {code})\n"
        list_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:"
        update.message.reply_text(list_text, reply_markup=cancel_kb)
        return WAITING_ADD_ITEM

def handle_add_qty(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    if not text.isdigit():
        update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=cancel_kb)
        return WAITING_ADD_QTY
    qty = int(text)
    if qty <= 0:
        update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", reply_markup=cancel_kb)
        return WAITING_ADD_QTY
    code = context.user_data.get("target_code")
    name = gdrive.base_by_code.get(code, {}).get("name", code)
    try:
        logic.adjust_stock(code, qty, "–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫.", reply_markup=inventory_kb)
        return STOCK_MENU
    new_stock = gdrive.warehouse_data.get(code, 0)
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {qty} —à—Ç —Ç–æ–≤–∞—Ä–∞ \"{name}\". –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {new_stock} —à—Ç.", reply_markup=inventory_kb)
    context.user_data.pop("target_code", None)
    context.user_data.pop("search_results", None)
    return STOCK_MENU

def start_receiving(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –ø—Ä–∏–µ–º–∫–∏ —Ç–æ–≤–∞—Ä–∞ (Excel/CSV) —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ [–∫–æ–¥, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]:", reply_markup=cancel_kb)
    return WAITING_RECEIVE_FILE

def handle_receive_file(update: Update, context: CallbackContext):
    document = update.message.document
    if not document:
        return WAITING_RECEIVE_FILE
    file_name = document.file_name or "receiving"
    ext = file_name.split(".")[-1] if "." in file_name else "xlsx"
    local_path = f"receiving.{ext}"
    try:
        file_obj = document.get_file()
        file_obj.download(custom_path=local_path)
        deliveries = __import__('utils').parse_stock_file(local_path)
        changes = logic.process_receiving(deliveries)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –ø—Ä–∏–µ–º–∫–∏: {e}")
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–∏–µ–º–∫–∏.", reply_markup=cancel_kb)
        return WAITING_RECEIVE_FILE
    if not changes:
        update.message.reply_text("‚úÖ –ü—Ä–∏–µ–º–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ò–∑–º–µ–Ω–µ–Ω–∏–π –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ—Ç.", reply_markup=inventory_kb)
    else:
        lines = [f"{name}: +{qty}" for name, qty in changes]
        update.message.reply_text("‚úÖ –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–ø—Ä–∏–µ–º–∫–∞):\n" + "\n".join(lines), reply_markup=inventory_kb)
    return STOCK_MENU

def start_revision(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–≤–∏–∑–∏–∏ (Excel/CSV) —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ [–∫–æ–¥, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]:", reply_markup=cancel_kb)
    return WAITING_REVISION_FILE

def handle_revision_file(update: Update, context: CallbackContext):
    document = update.message.document
    if not document:
        return WAITING_REVISION_FILE
    file_name = document.file_name or "revision"
    ext = file_name.split(".")[-1] if "." in file_name else "xlsx"
    local_path = f"revision.{ext}"
    try:
        file_obj = document.get_file()
        file_obj.download(custom_path=local_path)
        revision_list = __import__('utils').parse_stock_file(local_path)
        changes = logic.process_revision(revision_list)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —Ä–µ–≤–∏–∑–∏–∏: {e}")
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª —Ä–µ–≤–∏–∑–∏–∏.", reply_markup=cancel_kb)
        return WAITING_REVISION_FILE
    if not changes:
        update.message.reply_text("‚úÖ –†–µ–≤–∏–∑–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞: —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç.", reply_markup=inventory_kb)
    else:
        lines = [f"{name}: {'+' if diff>0 else ''}{diff}" for name, diff in changes]
        update.message.reply_text("‚úÖ –†–µ–≤–∏–∑–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–∑–º–µ–Ω–µ–Ω–∏—è:\n" + "\n".join(lines), reply_markup=inventory_kb)
    return STOCK_MENU

def handle_rollback(update: Update, context: CallbackContext):
    result = logic.rollback_last_action()
    if not result:
        update.message.reply_text("üîÑ –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞.", reply_markup=inventory_kb)
    else:
        name, opposite = result
        update.message.reply_text(f"üîÑ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {name} {opposite:+} —à—Ç.", reply_markup=inventory_kb)
    return STOCK_MENU

def handle_back_to_main(update: Update, context: CallbackContext):
    update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb)
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
def handle_search_query(update: Update, context: CallbackContext):
    query = update.message.text.strip()
    results, total = logic.search_products(query)
    if total == 0:
        update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.", reply_markup=main_menu_kb)
    else:
        msg = "üîé *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n"
        for code, name, brand, stock in results:
            msg += f"- {name} ({brand}) ‚Äì {stock} —à—Ç (–∫–æ–¥ {code})\n"
        if total > len(results):
            msg += f"_...–∏ –µ—â–µ {total - len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤._\n"
        update.message.reply_text(msg, reply_markup=main_menu_kb, parse_mode='Markdown')
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã /cancel –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'
def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb)
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
def handle_clear_confirm(update: Update, context: CallbackContext):
    text = update.message.text.strip().lower()
    if text in ["–¥–∞", "yes"]:
        try:
            gdrive.clear_orders()
            update.message.reply_text("‚úÖ –õ–∏—Å—Ç '–ó–∞–∫–∞–∑—ã' –æ—á–∏—â–µ–Ω.", reply_markup=main_menu_kb)
        except Exception as e:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–∏—Å—Ç–∞ '–ó–∞–∫–∞–∑—ã'.", reply_markup=main_menu_kb)
    else:
        update.message.reply_text("–û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤.", reply_markup=main_menu_kb)
    return MAIN_MENU

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è JobQueue)
def daily_report(context: CallbackContext):
    chat_id = config.ADMIN_CHAT_ID
    if not chat_id:
        return
    try:
        values = gdrive.history_sheet.get_all_values()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞: {e}")
        return
    if not values or len(values) < 2:
        context.bot.send_message(chat_id, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ.")
        return
    now = datetime.now()
    day_ago = now.timestamp() - 24*3600
    report_lines = []
    for row in values[1:]:
        if not row or len(row) < 4:
            continue
        date_str, item_str, change_str, reason_str = row[0], row[1], row[2], row[3]
        try:
            entry_time = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
        except:
            continue
        if entry_time.timestamp() >= day_ago:
            report_lines.append(f"{entry_time.strftime('%d.%m %H:%M')} ‚Äì {item_str}: {change_str} ({reason_str})")
    if not report_lines:
        context.bot.send_message(chat_id, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ.")
    else:
        report_text = "üìä *–û—Ç—á–µ—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\n" + "\n".join(report_lines)
        context.bot.send_message(chat_id, report_text, parse_mode='Markdown')
